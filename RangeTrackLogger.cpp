#include "RangeTrackLogger.h"

#include <cmath>

#include "sinlut.h"


/*
 *
 */


RangeTrackLogger::RangeTrackLogger(RangeTrackPositionReader *position_reader_x, RangeTrackPositionReader *position_reader_y, RangeTrackPositionReader *position_reader_theta, RangeTrackRangeReader *range_reader, RangeTrackFilter *range_filter, RangeTrackFilter *slope_filter, RangeTrackFilter *concavity_filter)
{
	SetPositionReaderX(position_reader_x);
	SetPositionReaderY(position_reader_y);
	SetPositionReaderTheta(position_reader_theta);
	SetRangeReader(range_reader);
	SetRangeFilter(range_filter);
	SetSlopeFilter(slope_filter);
	SetConcavityFilter(concavity_filter);

	// 69 values with and without (create_distance was in there twice)
	// This is for testing and will be moved into its own function later
	m_x_positions.reserve(750);
	m_y_positions.reserve(750);
	m_theta_positions.reserve(750);
	m_ranges.reserve(750);
}

void RangeTrackLogger::SetPositionReaderX(RangeTrackPositionReader* reader)
{
    m_position_reader_x = reader;
}

void RangeTrackLogger::SetPositionReaderY(RangeTrackPositionReader* reader)
{
    m_position_reader_y = reader;
}

void RangeTrackLogger::SetPositionReaderTheta(RangeTrackPositionReader* reader)
{
    m_position_reader_theta = reader;
}

void RangeTrackLogger::SetRangeReader(RangeTrackRangeReader* reader)
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88-1-7-672b1494:1245fa68a9a:-8000:0000000000000FDC begin
{
    m_range_reader = reader;
}
// section -64--88-1-7-672b1494:1245fa68a9a:-8000:0000000000000FDC end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

void RangeTrackLogger::SetAllFilter(RangeTrackFilter* filter)
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88-1-7-672b1494:1245fa68a9a:-8000:0000000000001001 begin
{
    SetRangeFilter(filter);
	SetSlopeFilter(filter);
	SetConcavityFilter(filter);
}
// section -64--88-1-7-672b1494:1245fa68a9a:-8000:0000000000001001 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

void RangeTrackLogger::SetRangeFilter(RangeTrackFilter* filter)
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88-1-7--6b4a04c1:1246524e722:-8000:00000000000010B6 begin
{
    m_range_filter = filter;
}
// section -64--88-1-7--6b4a04c1:1246524e722:-8000:00000000000010B6 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

void RangeTrackLogger::SetSlopeFilter(RangeTrackFilter* filter)
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88-1-7--6b4a04c1:1246524e722:-8000:00000000000010B9 begin
{
    m_slope_filter = filter;
}
// section -64--88-1-7--6b4a04c1:1246524e722:-8000:00000000000010B9 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

void RangeTrackLogger::SetConcavityFilter(RangeTrackFilter* filter)
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88-1-7--6b4a04c1:1246524e722:-8000:00000000000010BC begin
{
    m_concavity_filter = filter;
}
// section -64--88-1-7--6b4a04c1:1246524e722:-8000:00000000000010BC end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

void RangeTrackLogger::Reset()
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88-1-7-672b1494:1245fa68a9a:-8000:0000000000000FB9 begin
{
    m_x_positions.clear();
	m_y_positions.clear();
	m_theta_positions.clear();
	m_ranges.clear();
	m_filtered_ranges.clear();
    m_slopes.clear();
    m_filtered_slopes.clear();
    m_concavities.clear();
    m_filtered_concavities.clear();
    m_point_x_positions.clear();
    m_point_y_positions.clear();
    m_point_slopes.clear();
    m_point_concavities.clear();
    m_point_angle_slopes.clear();
    m_point_angle_concavities.clear();
}
// section -64--88-1-7-672b1494:1245fa68a9a:-8000:0000000000000FB9 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

void RangeTrackLogger::UpdateLog()
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88-1-7-672b1494:1245fa68a9a:-8000:0000000000000FBF begin
{
    // ToDo: interpolation (separate for each axis)

    m_x_positions.push_back(m_position_reader_x->GetPosition());
	m_y_positions.push_back(m_position_reader_y->GetPosition());
	m_theta_positions.push_back(m_position_reader_theta->GetPosition());
	m_ranges.push_back(m_range_reader->GetRange());
}

void RangeTrackLogger::UpdatePointStats()
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88-1-7-672b1494:1245fa68a9a:-8000:0000000000000FBF begin
{
    //printf("Filtering...\n");

	// segfault FIXED!
    m_range_filter->Filter(m_ranges, m_filtered_ranges);

	/////////////////////

	// Now we calculate rectangular coords of the point

	//printf("Calculating point xy\n");

	// X coord
	while(m_filtered_ranges.size() > m_point_x_positions.size())
	{
		// Simple trig here... starting position + distance * cos(angle)
		// We use a lookup table because Chumby doesn't have hardware float; a lookup table is over 1000 times faster
		// Lookup table returns a fixed-point value scaled up by 10 bits
		m_point_x_positions.push_back(m_x_positions[m_point_x_positions.size()] + ((m_filtered_ranges[m_point_x_positions.size()] * CosLut(m_theta_positions[m_point_x_positions.size()])) >> 10));
	}

	// Y coord
	while(m_filtered_ranges.size() > m_point_y_positions.size())
	{
		// Simple trig here... starting position + distance * sin(angle)
		// We use a lookup table because Chumby doesn't have hardware float; a lookup table is over 1000 times faster
		// Lookup table returns a fixed-point value scaled up by 10 bits
		m_point_y_positions.push_back(m_y_positions[m_point_y_positions.size()] + ((m_filtered_ranges[m_point_y_positions.size()] * SinLut(m_theta_positions[m_point_y_positions.size()])) >> 10));
	}

	/////////////////////

	// Now we calculate angle slopes

	//printf("Calculating angle slopes\n");

	// You can't take the slope of the first point
	while(m_point_angle_slopes.size() < 1)
	{
		m_point_angle_slopes.push_back(0);
	}

	// Right now we're using float libs... we really should implement a lookup table for this
	while(m_point_x_positions.size() > m_point_angle_slopes.size())
	{
		long dy = m_point_y_positions[m_point_angle_slopes.size()] - m_point_y_positions[m_point_angle_slopes.size()-1];
		long dx = m_point_x_positions[m_point_angle_slopes.size()] - m_point_x_positions[m_point_angle_slopes.size()-1];
		m_point_angle_slopes.push_back( (long) (atan2(dy, dx) * 1024) );
	}

	/////////////////////

	// Now we calculate angle concavities

    //printf("Calculating angle concavities\n");

	// You can't take the derivative of the first slope value
	while(m_point_angle_concavities.size() < 1)
	{
		//m_point_angle_slopes.push_back(0);
		m_point_angle_concavities.push_back(0);
	}

	// We define the concavity to be dependent on values n-1, n, and n+1, so wait for n+1 to be present
	while(m_point_angle_slopes.size() > m_point_angle_concavities.size() + 1) // moved the +1; I think that fixes a nice big bug
	{
		long x0 = m_point_x_positions[m_point_angle_concavities.size()-1];
		long x1 = m_point_x_positions[m_point_angle_concavities.size()];
		long x2 = m_point_x_positions[m_point_angle_concavities.size()+1];

		long y0 = m_point_y_positions[m_point_angle_concavities.size()-1];
		long y1 = m_point_y_positions[m_point_angle_concavities.size()];
		long y2 = m_point_y_positions[m_point_angle_concavities.size()+1];

		long dx1 = x1-x0;
		long dx2 = x2-x1;

		long dy1 = y1-y0;
		long dy2 = y2-y1;

		// Right now we're using float libs... we really should implement a lookup table for this
		long distance1 = (long) sqrt((double)(dx1 * dx1 + dy1 * dy1));
		long distance2 = (long) sqrt((double)(dx2 * dx2 + dy2 * dy2));

		long sum_distance = distance1 + distance2;

		long theta1 = m_point_angle_slopes[m_point_angle_concavities.size()];
		long theta2 = m_point_angle_slopes[m_point_angle_concavities.size()+1];

		long dtheta = theta2 - theta1;

		// Normalize angle
		while(dtheta < -3142)
			dtheta += 6283;
		while(dtheta > 3142)
			dtheta -= 6283;

        if(sum_distance)
        {
            m_point_angle_concavities.push_back((dtheta<<10)/sum_distance);
        }
        else
        {
            m_point_angle_concavities.push_back(0);
        }

	}

	/////////////////////

	#if 0
	// This code is broken and probably irrelevant... so it's disabled

	// Now we calculate slopes

	// this should be handled by a reset() or a constructor... it's wasteful to do it always
	while(m_slopes.size() < 1)
	{
		m_slopes.push_back(0);
	}

	while(m_filtered_ranges.size() > m_slopes.size())
	{
		long new_index = m_slopes.size();
		m_slopes.push_back( ( (m_filtered_ranges[new_index]-m_filtered_ranges[new_index-1]) << 10 ) / (m_positions[new_index]-m_positions[new_index-1]) );
	}

	#endif

	//printf("Point Stats Calculation complete\n");
}

// section -64--88-1-7-672b1494:1245fa68a9a:-8000:0000000000000FBF end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

void RangeTrackLogger::UpdateAll()
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88-1-7-672b1494:1245fa68a9a:-8000:0000000000000FBD begin
{
    UpdateLog();
	UpdatePointStats();
}
// section -64--88-1-7-672b1494:1245fa68a9a:-8000:0000000000000FBD end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

void RangeTrackLogger::DumpLog(const char filename[])
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88-1-8-45c899e5:124a28211a8:-8000:0000000000001126 begin
{
    int index = 0;

	FILE *outFile = fopen(filename, "w");

	//fprintf(outFile, "Range Data\n\n");
	//fprintf(outFile, "Angle, Range\n");

	fprintf(outFile, "Bot X, Bot Y, Bot Theta, Range, Range Filtered, Point X, Point Y, Point Angle Slope, Point Angle Concavity\n");

	for(index=0; index<m_filtered_ranges.size(); index++)
	{
		fprintf(outFile, "%d, %d, %d, %d, %d, %d, %d, %d, %d\n", m_x_positions[index], m_y_positions[index], m_theta_positions[index], m_ranges[index], m_filtered_ranges[index], m_point_x_positions[index], m_point_y_positions[index], m_point_angle_slopes[index], m_point_angle_concavities[index]);
	}

	fclose (outFile);
}
// section -64--88-1-8-45c899e5:124a28211a8:-8000:0000000000001126 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element


RangeTrackPositionReader* RangeTrackLogger::GetXReader()
{
    return m_position_reader_x;
}

RangeTrackPositionReader* RangeTrackLogger::GetYReader()
{
    return m_position_reader_y;
}

RangeTrackPositionReader* RangeTrackLogger::GetThetaReader()
{
    return m_position_reader_theta;
}
